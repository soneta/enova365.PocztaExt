
//----------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a tool.
//		Changes to this file may cause incorrect behaviour and will be lost 
//		if the code is regenerated.
// </autogenerated>
//----------------------------------------------------------------------------------

using System;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Globalization;
using Soneta.Types;
using Soneta.Business;
using Soneta.Handel;
using Soneta.CRM;
using Soneta.Business.App;
using enova365.PocztaExt.WiadomosciExt;

[assembly: ModuleType("PocztaExt", typeof(enova365.PocztaExt.WiadomosciExt.PocztaExtModule), 4, "PocztaExt", 2, VersionNumber=2)]

namespace enova365.PocztaExt.WiadomosciExt {

	/// <summary>
	/// Moduł PocztaExt.
	/// <seealso cref="Soneta.Handel"/>
	/// <seealso cref="Soneta.CRM"/>
	/// <seealso cref="Soneta.Business.App"/>
	/// </summary>
	/// <seealso cref="Soneta.Business.Module"/>
	/// <seealso cref="Soneta.Business.Session"/>
	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public partial class PocztaExtModule : Module {

		public static PocztaExtModule GetInstance(ISessionable session) => (PocztaExtModule)session?.Session?.Modules[moduleInfo];

		private static Soneta.Business.App.ModuleInfo moduleInfo = new Soneta.Business.App.ModuleInfo(session => new PocztaExtModule(session)) {
		};

		PocztaExtModule(Session session) : base(session) {}

		private HandelModule moduleHandel;

		[Browsable(false)]
		public HandelModule Handel => moduleHandel ?? (moduleHandel = HandelModule.GetInstance(Session));

		private CRMModule moduleCRM;

		[Browsable(false)]
		public CRMModule CRM => moduleCRM ?? (moduleCRM = CRMModule.GetInstance(Session));

		private static Soneta.Business.App.TableInfo tableInfoWiadomosciExt = new Soneta.Business.App.TableInfo.Create<WiadomosciExt, WiadomoscExt, WiadomoscExtRecord>("Wiadomos") {
		};

		public WiadomosciExt WiadomosciExt => (WiadomosciExt)Session.Tables[tableInfoWiadomosciExt];

		private static Soneta.Business.App.KeyInfo keyInfoWiadomoscExtWiadomosc = new Soneta.Business.App.KeyInfo(tableInfoWiadomosciExt, table => new WiadomoscExtTable.WiadomoscRelation(table)) {
			Name = "Dokumenty związane z wiadomością",
			RelationTo = "WiadomoscEmail",
			KeyFields = new[] {"Wiadomosc", "ID"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoWiadomoscExtDokument = new Soneta.Business.App.KeyInfo(tableInfoWiadomosciExt, table => new WiadomoscExtTable.DokumentRelation(table)) {
			Name = "Powiązanie dokumentu z wiadomosciąEmail",
			RelationTo = "DokumentHandlowy",
			KeyFields = new[] {"Dokument", "ID"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoWiadomoscExtWgWiadomoscDokument = new Soneta.Business.App.KeyInfo(tableInfoWiadomosciExt, table => new WiadomoscExtTable.WgWiadomoscDokumentKey(table)) {
			Name = "WgWiadomoscDokument",
			Unique = true,
			PrimaryKey = true,
			KeyFields = new[] {"Wiadomosc", "Dokument"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów WiadomoscExt.
		/// Dziedzicząca klasa <see cref="WiadomosciExt"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="WiadomosciExt"/>
		/// <seealso cref="WiadomoscExtRow"/>
		/// <seealso cref="WiadomoscExt"/>
		/// <seealso cref="Soneta.Business.Table"/>
		public abstract partial class WiadomoscExtTable : GuidedTable {

			protected WiadomoscExtTable() {}

			public class WiadomoscRelation : Key<WiadomoscExt> {
				internal WiadomoscRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((WiadomoscExtRecord)rec).Wiadomosc,
					row.ID
				};

				public SubTable<WiadomoscExt> this[WiadomoscEmail wiadomosc] => new SubTable<WiadomoscExt>(this, wiadomosc);
			}

			public WiadomoscRelation WgWiadomosc => (WiadomoscRelation)Session.Keys[keyInfoWiadomoscExtWiadomosc];

			public class DokumentRelation : Key<WiadomoscExt> {
				internal DokumentRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((WiadomoscExtRecord)rec).Dokument,
					row.ID
				};

				public SubTable<WiadomoscExt> this[DokumentHandlowy dokument] => new SubTable<WiadomoscExt>(this, dokument);
			}

			public DokumentRelation WgDokument => (DokumentRelation)Session.Keys[keyInfoWiadomoscExtDokument];

			public class WgWiadomoscDokumentKey : Key<WiadomoscExt> {
				internal WgWiadomoscDokumentKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((WiadomoscExtRecord)rec).Wiadomosc,
					((WiadomoscExtRecord)rec).Dokument
				};

				public SubTable<WiadomoscExt> this[WiadomoscEmail wiadomosc] => new SubTable<WiadomoscExt>(this, wiadomosc);

				public WiadomoscExt this[WiadomoscEmail wiadomosc, DokumentHandlowy dokument] => (WiadomoscExt)Find(wiadomosc, dokument);
			}

			public WgWiadomoscDokumentKey WgWiadomoscDokument => (WgWiadomoscDokumentKey)Session.Keys[keyInfoWiadomoscExtWgWiadomoscDokument];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="PocztaExtModule"/>
			public new PocztaExtModule Module => (PocztaExtModule)base.Module;

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="WiadomoscExt"/>
			public new WiadomoscExt this[int id] => (WiadomoscExt)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="WiadomoscExt"/>
			public new WiadomoscExt[] this[int[] ids] => (WiadomoscExt[])base[ids];

			public new WiadomoscExt this[Guid guid] => (WiadomoscExt)base[guid];

			protected override Row CreateRow(RowCreator creator) => new WiadomoscExt(creator);

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				names.Append(divider); names.Append("Wiadomosc");
				names.Append(divider); names.Append("Dokument");
				names.Append(divider); names.Append("CzasRealizacji");
			}

		}

		[Caption("Poziązanie wiadmości z dokumentem handlowym")]
		public abstract partial class WiadomoscExtRow : GuidedRow {

			private WiadomoscExtRecord record;

			protected override void AssignRecord(Record rec) {
				record = (WiadomoscExtRecord)rec;
			}

			protected WiadomoscExtRow(RowCreator creator) : base(false) {
			}

			protected WiadomoscExtRow([Required] WiadomoscEmail wiadomosc, [Required] DokumentHandlowy dokument) : base(true) {
				if (wiadomosc==null) throw new RequiredException(this, "Wiadomosc");
				if (dokument==null) throw new RequiredException(this, "Dokument");
				GetRecord();
				record.Wiadomosc = wiadomosc;
				record.Dokument = dokument;
			}

			[Description("Powiązanie wiadomości eMail z Dokumentem handlowym.")]
			[Category("Ogólne")]
			[Caption("WiadomoscEmail")]
			[Required]
			public WiadomoscEmail Wiadomosc {
				get {
					if (record==null) GetRecord();
					return (WiadomoscEmail)GetRowReference(ref record.Wiadomosc);
				}
			}

			[Description("Powiązanie dokumentu z wiadomościami Email")]
			[Category("Ogólne")]
			[Caption("Dokument")]
			[Required]
			public DokumentHandlowy Dokument {
				get {
					if (record==null) GetRecord();
					return (DokumentHandlowy)GetRowReference(ref record.Dokument);
				}
			}

			[Description("Dni oczekiwania do sprzedaży")]
			[Category("Ogólne")]
			[Caption("CzasRealizacji")]
			public int CzasRealizacji {
				get {
					if (record==null) GetRecord();
					return record.CzasRealizacji;
				}
				set {
					WiadomoscExtSchema.CzasRealizacjiBeforeEdit?.Invoke((WiadomoscExt)this, ref value);
					GetEdit(record==null, false);
					record.CzasRealizacji = value;
					WiadomoscExtSchema.CzasRealizacjiAfterEdit?.Invoke((WiadomoscExt)this);
				}
			}

			[Browsable(false)]
			public new WiadomosciExt Table => (WiadomosciExt)base.Table;

			[Browsable(false)]
			public PocztaExtModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => tableInfoWiadomosciExt;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				WiadomoscExtSchema.OnCalcObjectRight?.Invoke((WiadomoscExt)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				WiadomoscExtSchema.OnCalcParentsObjectRight?.Invoke((WiadomoscExt)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				WiadomoscExtSchema.OnCalcReadOnly?.Invoke((WiadomoscExt)this, ref result);
				return result;
			}

			protected override void OnAdded() {
				base.OnAdded();
				System.Diagnostics.Debug.Assert(record.Wiadomosc==null || record.Wiadomosc.State==RowState.Detached || Session==record.Wiadomosc.Session);
				System.Diagnostics.Debug.Assert(record.Dokument==null || record.Dokument.State==RowState.Detached || Session==record.Dokument.Session);
				WiadomoscExtSchema.OnAdded?.Invoke((WiadomoscExt)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				WiadomoscExtSchema.OnLoaded?.Invoke((WiadomoscExt)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				WiadomoscExtSchema.OnEditing?.Invoke((WiadomoscExt)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				WiadomoscExtSchema.OnDeleting?.Invoke((WiadomoscExt)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				WiadomoscExtSchema.OnDeleted?.Invoke((WiadomoscExt)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				WiadomoscExtSchema.OnRepacked?.Invoke((WiadomoscExt)this);
			}

		}

		public sealed class WiadomoscExtRecord : GuidedRecord {
			[Required]
			[ParentTable("WiadomoscEmail")]
			public IRow Wiadomosc;
			[Required]
			[ParentTable("DokumentHandlowy")]
			public IRow Dokument;
			public int CzasRealizacji;

			public override Record Clone() {
				WiadomoscExtRecord rec = (WiadomoscExtRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				Wiadomosc = creator.Read_Row("WiadomosciEmail");
				Dokument = creator.Read_Row("DokHandlowe");
				CzasRealizacji = creator.Read_int();
			}
		}

		public static class WiadomoscExtSchema {

			internal static RowDelegate<WiadomoscExtRow, int> CzasRealizacjiBeforeEdit;
			public static void AddCzasRealizacjiBeforeEdit(RowDelegate<WiadomoscExtRow, int> value)
				=> CzasRealizacjiBeforeEdit = (RowDelegate<WiadomoscExtRow, int>)Delegate.Combine(CzasRealizacjiBeforeEdit, value);

			internal static RowDelegate<WiadomoscExtRow> CzasRealizacjiAfterEdit;
			public static void AddCzasRealizacjiAfterEdit(RowDelegate<WiadomoscExtRow> value)
				=> CzasRealizacjiAfterEdit = (RowDelegate<WiadomoscExtRow>)Delegate.Combine(CzasRealizacjiAfterEdit, value);

			internal static RowDelegate<WiadomoscExtRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<WiadomoscExtRow> value)
				=> OnLoaded = (RowDelegate<WiadomoscExtRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<WiadomoscExtRow> OnAdded;
			public static void AddOnAdded(RowDelegate<WiadomoscExtRow> value)
				=> OnAdded = (RowDelegate<WiadomoscExtRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<WiadomoscExtRow> OnEditing;
			public static void AddOnEditing(RowDelegate<WiadomoscExtRow> value)
				=> OnEditing = (RowDelegate<WiadomoscExtRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<WiadomoscExtRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<WiadomoscExtRow> value)
				=> OnDeleting = (RowDelegate<WiadomoscExtRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<WiadomoscExtRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<WiadomoscExtRow> value)
				=> OnDeleted = (RowDelegate<WiadomoscExtRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<WiadomoscExtRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<WiadomoscExtRow> value)
				=> OnRepacked = (RowDelegate<WiadomoscExtRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<WiadomoscExtRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<WiadomoscExtRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<WiadomoscExtRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<WiadomoscExtRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<WiadomoscExtRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<WiadomoscExtRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<WiadomoscExtRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<WiadomoscExtRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<WiadomoscExtRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

		private static Soneta.Business.App.TableInfo tableInfoWydrukiWiad = new Soneta.Business.App.TableInfo.Create<WydrukiWiad, WydrukWiadomosci, WydrukWiadomosciRecord>("WydrukWi") {
		};

		public WydrukiWiad WydrukiWiad => (WydrukiWiad)Session.Tables[tableInfoWydrukiWiad];

		private static Soneta.Business.App.KeyInfo keyInfoWydrukWiadomosciDefinicja = new Soneta.Business.App.KeyInfo(tableInfoWydrukiWiad, table => new WydrukWiadomosciTable.DefinicjaRelation(table)) {
			Name = "Relacja pola Definicja",
			RelationTo = "DefDokHandlowego",
			KeyFields = new[] {"Definicja", "ID"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoWydrukWiadomosciOperator = new Soneta.Business.App.KeyInfo(tableInfoWydrukiWiad, table => new WydrukWiadomosciTable.OperatorRelation(table)) {
			Name = "Relacja pola Operator",
			RelationTo = "Operator",
			KeyFields = new[] {"Operator", "ID"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoWydrukWiadomosciWgDefinicjaOperator = new Soneta.Business.App.KeyInfo(tableInfoWydrukiWiad, table => new WydrukWiadomosciTable.WgDefinicjaOperatorKey(table)) {
			Name = "WgDefinicjaOperator",
			Unique = true,
			PrimaryKey = true,
			KeyFields = new[] {"Definicja", "Operator"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów WydrukWiadomosci.
		/// Dziedzicząca klasa <see cref="WydrukiWiad"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="WydrukiWiad"/>
		/// <seealso cref="WydrukWiadomosciRow"/>
		/// <seealso cref="WydrukWiadomosci"/>
		/// <seealso cref="Soneta.Business.Table"/>
		public abstract partial class WydrukWiadomosciTable : GuidedTable {

			protected WydrukWiadomosciTable() {}

			public class DefinicjaRelation : Key<WydrukWiadomosci> {
				internal DefinicjaRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((WydrukWiadomosciRecord)rec).Definicja,
					row.ID
				};

				public SubTable<WydrukWiadomosci> this[DefDokHandlowego definicja] => new SubTable<WydrukWiadomosci>(this, definicja);
			}

			public DefinicjaRelation WgDefinicja => (DefinicjaRelation)Session.Keys[keyInfoWydrukWiadomosciDefinicja];

			public class OperatorRelation : Key<WydrukWiadomosci> {
				internal OperatorRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((WydrukWiadomosciRecord)rec).Operator,
					row.ID
				};

				public SubTable<WydrukWiadomosci> this[Operator _operator] => new SubTable<WydrukWiadomosci>(this, _operator);
			}

			public OperatorRelation WgOperator => (OperatorRelation)Session.Keys[keyInfoWydrukWiadomosciOperator];

			public class WgDefinicjaOperatorKey : Key<WydrukWiadomosci> {
				internal WgDefinicjaOperatorKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((WydrukWiadomosciRecord)rec).Definicja,
					((WydrukWiadomosciRecord)rec).Operator
				};

				public SubTable<WydrukWiadomosci> this[DefDokHandlowego definicja] => new SubTable<WydrukWiadomosci>(this, definicja);

				public WydrukWiadomosci this[DefDokHandlowego definicja, Operator _operator] => (WydrukWiadomosci)Find(definicja, _operator);
			}

			public WgDefinicjaOperatorKey WgDefinicjaOperator => (WgDefinicjaOperatorKey)Session.Keys[keyInfoWydrukWiadomosciWgDefinicjaOperator];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="PocztaExtModule"/>
			public new PocztaExtModule Module => (PocztaExtModule)base.Module;

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="WydrukWiadomosci"/>
			public new WydrukWiadomosci this[int id] => (WydrukWiadomosci)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="WydrukWiadomosci"/>
			public new WydrukWiadomosci[] this[int[] ids] => (WydrukWiadomosci[])base[ids];

			public new WydrukWiadomosci this[Guid guid] => (WydrukWiadomosci)base[guid];

			protected override Row CreateRow(RowCreator creator) => new WydrukWiadomosci(creator);

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				names.Append(divider); names.Append("Definicja");
				names.Append(divider); names.Append("Operator");
				names.Append(divider); names.Append("Wzorzec");
			}

		}

		[Caption("Definicja wydruków pod wysyłkę wiadomosci")]
		public abstract partial class WydrukWiadomosciRow : GuidedRow {

			private WydrukWiadomosciRecord record;

			protected override void AssignRecord(Record rec) {
				record = (WydrukWiadomosciRecord)rec;
			}

			protected WydrukWiadomosciRow(RowCreator creator) : base(false) {
			}

			protected WydrukWiadomosciRow([Required] DefDokHandlowego definicja, [Required] Operator _operator) : base(true) {
				if (definicja==null) throw new RequiredException(this, "Definicja");
				if (_operator==null) throw new RequiredException(this, "Operator");
				GetRecord();
				record.Definicja = definicja;
				record.Operator = _operator;
			}

			[Description("Definicja dok han")]
			[Category("Ogólne")]
			[Caption("Definicja")]
			[Required]
			public DefDokHandlowego Definicja {
				get {
					if (record==null) GetRecord();
					return (DefDokHandlowego)GetRowReference(ref record.Definicja);
				}
			}

			[Description("Operator.")]
			[Category("Ogólne")]
			[Caption("Operator")]
			[Required]
			public Operator Operator {
				get {
					if (record==null) GetRecord();
					return (Operator)GetRowReference(ref record.Operator);
				}
			}

			[Description("Wzorzec wydruku")]
			[Category("Ogólne")]
			[MaxLength(255)]
			public string Wzorzec {
				get {
					if (record==null) GetRecord();
					return record.Wzorzec;
				}
				set {
					WydrukWiadomosciSchema.WzorzecBeforeEdit?.Invoke((WydrukWiadomosci)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>WzorzecLength) throw new ValueToLongException(this, "Wzorzec", WzorzecLength);
					GetEdit(record==null, false);
					record.Wzorzec = value;
					WydrukWiadomosciSchema.WzorzecAfterEdit?.Invoke((WydrukWiadomosci)this);
				}
			}

			public const int WzorzecLength = 255;

			[Browsable(false)]
			public new WydrukiWiad Table => (WydrukiWiad)base.Table;

			[Browsable(false)]
			public PocztaExtModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => tableInfoWydrukiWiad;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				WydrukWiadomosciSchema.OnCalcObjectRight?.Invoke((WydrukWiadomosci)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				WydrukWiadomosciSchema.OnCalcParentsObjectRight?.Invoke((WydrukWiadomosci)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				WydrukWiadomosciSchema.OnCalcReadOnly?.Invoke((WydrukWiadomosci)this, ref result);
				return result;
			}

			protected override void OnAdded() {
				base.OnAdded();
				System.Diagnostics.Debug.Assert(record.Definicja==null || record.Definicja.State==RowState.Detached || Session==record.Definicja.Session);
				System.Diagnostics.Debug.Assert(record.Operator==null || record.Operator.State==RowState.Detached || Session==record.Operator.Session);
				WydrukWiadomosciSchema.OnAdded?.Invoke((WydrukWiadomosci)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				WydrukWiadomosciSchema.OnLoaded?.Invoke((WydrukWiadomosci)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				WydrukWiadomosciSchema.OnEditing?.Invoke((WydrukWiadomosci)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				WydrukWiadomosciSchema.OnDeleting?.Invoke((WydrukWiadomosci)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				WydrukWiadomosciSchema.OnDeleted?.Invoke((WydrukWiadomosci)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				WydrukWiadomosciSchema.OnRepacked?.Invoke((WydrukWiadomosci)this);
			}

		}

		public sealed class WydrukWiadomosciRecord : GuidedRecord {
			[Required]
			[ParentTable("DefDokHandlowego")]
			public IRow Definicja;
			[Required]
			[ParentTable("Operator")]
			public IRow Operator;
			[MaxLength(255)]
			public string Wzorzec = "";

			public override Record Clone() {
				WydrukWiadomosciRecord rec = (WydrukWiadomosciRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				Definicja = creator.Read_Row("DefDokHandlowych");
				Operator = creator.Read_Row("Operators");
				Wzorzec = creator.Read_string();
			}
		}

		public static class WydrukWiadomosciSchema {

			internal static RowDelegate<WydrukWiadomosciRow, string> WzorzecBeforeEdit;
			public static void AddWzorzecBeforeEdit(RowDelegate<WydrukWiadomosciRow, string> value)
				=> WzorzecBeforeEdit = (RowDelegate<WydrukWiadomosciRow, string>)Delegate.Combine(WzorzecBeforeEdit, value);

			internal static RowDelegate<WydrukWiadomosciRow> WzorzecAfterEdit;
			public static void AddWzorzecAfterEdit(RowDelegate<WydrukWiadomosciRow> value)
				=> WzorzecAfterEdit = (RowDelegate<WydrukWiadomosciRow>)Delegate.Combine(WzorzecAfterEdit, value);

			internal static RowDelegate<WydrukWiadomosciRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<WydrukWiadomosciRow> value)
				=> OnLoaded = (RowDelegate<WydrukWiadomosciRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<WydrukWiadomosciRow> OnAdded;
			public static void AddOnAdded(RowDelegate<WydrukWiadomosciRow> value)
				=> OnAdded = (RowDelegate<WydrukWiadomosciRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<WydrukWiadomosciRow> OnEditing;
			public static void AddOnEditing(RowDelegate<WydrukWiadomosciRow> value)
				=> OnEditing = (RowDelegate<WydrukWiadomosciRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<WydrukWiadomosciRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<WydrukWiadomosciRow> value)
				=> OnDeleting = (RowDelegate<WydrukWiadomosciRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<WydrukWiadomosciRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<WydrukWiadomosciRow> value)
				=> OnDeleted = (RowDelegate<WydrukWiadomosciRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<WydrukWiadomosciRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<WydrukWiadomosciRow> value)
				=> OnRepacked = (RowDelegate<WydrukWiadomosciRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<WydrukWiadomosciRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<WydrukWiadomosciRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<WydrukWiadomosciRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<WydrukWiadomosciRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<WydrukWiadomosciRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<WydrukWiadomosciRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<WydrukWiadomosciRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<WydrukWiadomosciRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<WydrukWiadomosciRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

	}

	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public static class StaticsPocztaExtModule {
		public static PocztaExtModule GetPocztaExt(this Session session) => PocztaExtModule.GetInstance(session);
	}

}

